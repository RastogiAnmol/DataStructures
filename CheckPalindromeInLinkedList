# Python program to detect and remove loop in linked list

# Node class


class Node:

    # Constructor to initialize the node object
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:

    # Function to initialize head
    def __init__(self):
        self.head = None

    def detect_and_remove_loop(self):
        slow_p = fast_p = self.head
        while slow_p and fast_p and fast_p.next:
            slow_p = slow_p.next
            fast_p = fast_p.next.next

            # If slow_p and fast_p meet at some point
            # then there is a loop
            if slow_p == fast_p:
                self.remove_loop(slow_p)

                # Return 1 to indicate that loop if found
                return 1

                # Return 0 to indicate that there is no loop
        return 0

    # Function to remove loop
    # loop node-> Pointer to one of the loop nodes
    # head --> Pointer to the start node of the
    # linked list
    def remove_loop(self, loop_node):

        # Set a pointer to the beginning of the linked
        # list and move it one by one to find the first
        # node which is part of the linked list
        ptr1 = self.head
        while (1):
            # Now start a pointer from loop_node and check
            # if it ever reaches ptr2
            ptr2 = loop_node
            while (ptr2.next != loop_node and ptr2.next != ptr1):
                ptr2 = ptr2.next

            # If ptr2 reached ptr1 then there is a loop.
            # So break the loop
            if ptr2.next == ptr1:
                break

            ptr1 = ptr1.next

        # After the end of loop ptr2 is the lsat node of
        # the loop. So make next of ptr2 as NULL
        ptr2.next = None

    # Function to insert a new node at the beginning
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node

        # Utility function to prit the linked LinkedList

    def print_list(self):
        temp = self.head
        while temp:
            print(temp.data)
            temp = temp.next

    def reverse(self, head):
        prev = None
        current = head
        while current is not None:
            next = current.next
            current.next = prev
            prev = current
            current = next
        head = prev
        return head

    def compare_lists(self, head2):
        temp1 = self.head
        temp2 = head2
        while temp1 and temp2:
            if temp1.data == temp2.data:
                temp1 = temp1.next
                temp2 = temp2.next
            else:
                return False
        if temp1 is None and temp2 is None:
            return True
        return False

    def check_palindrome(self):
        slow_ptr = fast_ptr = prev_of_slow_ptr = self.head
        second_half = mid_node = None
        while fast_ptr is not None and fast_ptr.next is not None:
            fast_ptr = fast_ptr.next.next
            """we need previous of the slow_ptr for linked lists  with odd elements"""
            prev_of_slow_ptr = slow_ptr
            slow_ptr = slow_ptr.next
        """fast_ptr would become NULL when there are even elements in list.  
           And not NULL for odd elements. We need to skip the middle node  
           for odd case and store it somewhere so that we can restore the 
           original list"""
        if fast_ptr is not None:
            mid_node = slow_ptr
            slow_ptr = slow_ptr.next
        #     Now reverse the second half and compare it with first half
        second_half = slow_ptr
        prev_of_slow_ptr.next = None
        second_half = self.reverse(second_half)
        res = self.compare_lists(second_half)

        second_half = self.reverse(second_half)

        if mid_node is not None:
            prev_of_slow_ptr.next = mid_node
            mid_node.next = second_half
        else:
            prev_of_slow_ptr.next = second_half
        return res
        # Driver program


linked_list = LinkedList()
linked_list.push(50)
linked_list.push(20)
linked_list.push(15)
linked_list.push(15)
linked_list.push(20)
linked_list.push(50)
linked_list.print_list()

res = linked_list.check_palindrome()
print(res)
linked_list.print_list()


