// A linked list node 
#include <iostream>
struct Node 
{ 
int data; 
Node *next; 
};
Node* head = NULL;
void Add(int data);
void Insert(int data,int position);
void Print();
void Delete(int position);
void Add(int data)
{
    Node* nodeToBeInserted= new Node();
    nodeToBeInserted->data= data;
    nodeToBeInserted->next= head;
    head= nodeToBeInserted;
}
void Insert(int data, int position)
{
    Node* temp1 = new Node();
    temp1->data = data;
    temp1->next= NULL;
    if(position == 1)
    {
        temp1->next= head;
        head = temp1;
        return;
    }
    Node* temp2 = head;
    for(int i = 0; i < position-2; i++)
    {
        temp2 = temp2->next;
    }
    temp1->next = temp2->next;
    temp2->next= temp1;
}

void Print()
{
    Node* temp = head;
    while(temp != NULL)
    {
        std::cout << temp->data <<"->";
        temp = temp->next;
    }
    std::cout <<"end";
}
void Delete(int position)
{
  Node* temp3 = head;
  int count = 0;
  while(temp3 != NULL)
  {
count++;
temp3 = temp3->next;
  }
  if(position>count)
  {
    std::cout << "\nInvalid position\n";
    return;
  }
Node* temp1= head;
if(position == 1)
{
  head = temp1->next;
  delete temp1;
return;
}
for(int i = 0; i < position-2; i++)
{
  temp1 = temp1->next;
  // temp1 points to (n-1)th node now
}
Node* temp2 = temp1->next; // this is nth node
temp1->next = temp2->next;
delete temp2;
}
int main() 
{
Add(9);
Add(7);
Add(5);
Add(3);
std::cout << "After push operation \n";
Print();
Insert(1,1);
Insert(2,2);
Insert(4,4);
Insert(6,6);
Insert(8,8);
std::cout << "\nAfter insert operation \n";
Print();
Delete(1);
std::cout << "\nAfter delete operation \n";
Print();
Delete(4);
std::cout << "\nAfter delete operation \n";
Print();
Delete(8);
return 0; 
} 
