# Python Code to detect a loop and
# find the length of the loop
# Node class


class Node:

    # Function to make a node
    def __init__(self, val):
        self.val = val
        self.next = None


# Linked List class
class LinkedList:

    # Function to initialize the
    # head of the linked list
    def __init__(self):
        self.head = None

        # Function to insert a new

    def push(self, new_data):

        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node

    # Linked List. This function creates
    # a loop by connecting the last node
    # to n^th node of the linked list,
    # (counting first node as 1)
    def create_loop(self, n):

        # LoopNode is the connecting node to
        # the last node of linked list
        loop_node = self.head
        for _ in range(0, n-1):
            loop_node = loop_node.next

        # end is the last node of the Linked List
        end = self.head
        while end.next:
            end = end.next

        # Creating the loop
        end.next = loop_node

        # Function to detect the loop and return

    """If the returned
    value is zero, that means that either
    the linked list is empty or the linked
    list doesn't have any loop"""

    def detect_loop(self):

        # if linked list is empty then there
        # is no loop, so return 0
        if self.head is None:
            return 0

        # Using Floydâ€™s Cycle-Finding
        # Algorithm/ Slow-Fast Pointer Method
        slow = self.head
        fast = self.head
        loop_detector = False
        while slow and fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow == fast:
                loop_detector = True
                print("Found Loop")
                break
        if loop_detector:
            count = 1
            temp = slow
            while temp.next is not slow:
                count += 1
                temp = temp.next
            return count
        # If no loop is found
        return 0


# Setting up the code
# Making a Linked List and adding the nodes
myLL = LinkedList()
myLL.push(5)
myLL.push(4)
myLL.push(3)
myLL.push(2)
myLL.push(1)

# Creating a loop in the linked List
# Loop is created by connecting the
# last node of linked list to n^th node
myLL.create_loop(2)

# Checking for Loop in the Linked List
# and printing the length of the loop
loopLength = myLL.detect_loop()
if loopLength == 0:
    print("No loop in list")
else:
    print(f"No of nodes in the loop are : {str(loopLength)}")

# This code is contributed by Anmol Rastogi 4
