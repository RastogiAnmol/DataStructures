
#include "pch.h"
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;
//Definition of Node for Binary search tree
struct BstNode {
	char data;
	BstNode* left;
	BstNode* right;
};

// Function to create a new Node in heap
BstNode* GetNewNode(char data) {
	BstNode* newNode = new BstNode();
	newNode->data = data;
	newNode->left = newNode->right = NULL;
	return newNode;
}

// To insert data in BST, returns address of root node 
BstNode* Insert(BstNode* root, char data) {
	if (root == NULL) { // empty tree
		root = GetNewNode(data);
	}
	// if data to be inserted is lesser, insert in left subtree. 
	else if (data <= root->data) {
		root->left = Insert(root->left, data);
	}
	// else, insert in right subtree. 
	else {
		root->right = Insert(root->right, data);
	}
	return root;
}

// Function to print Nodes in a binary tree in Level order
void LevelOrder(BstNode* root) {
	if (root == NULL) return;
	queue<BstNode*> Q;
	Q.push(root);
	//while there is at least one discovered node
	while (!Q.empty()) {
		BstNode* current = Q.front();
		Q.pop(); // removing the element at front
		cout << current->data << " ";
		if (current->left != NULL) Q.push(current->left);
		if (current->right != NULL) Q.push(current->right);
	}
}
int main() {
	BstNode* root = NULL;  // Creating an empty tree
	/*Code to test the logic*/
	root = Insert(root, 'M'); root = Insert(root, 'B');
	root = Insert(root, 'Q'); root = Insert(root, 'Z');
	root = Insert(root, 'A'); root = Insert(root, 'C');

	// BFS traversal
	LevelOrder(root);
}
